# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    environment:
      CC_TEST_REPORTER_ID: 0069fc0d69294e56de0b134cd62f6be6d1ac6e8ed80a7e71a2770c1d166d93ff
    docker:
      - image: circleci/python:3.6.1
      - image: circleci/postgres:9.6.2-alpine

    working_directory: ~/repo

    steps:
      - checkout

      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.0

      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run:
          name: setup database
          command: |
              sudo apt update
              sudo apt install postgresql-client
              psql -h localhost -U root postgres -c "create user ubuntu with password 'ubuntu';"
              psql -h localhost -U root postgres -c "alter user ubuntu with superuser"

      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "setup.py" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install test-reporter
          command: |
              curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
              chmod +x ./cc-test-reporter

      - run:
          name: install dependencies
          command: |
            sudo apt install poppler-utils
            python3 -m venv venv
            . venv/bin/activate
            pip install -e .[test]

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "setup.py" }}

      - run:
          name: run tests
          command: |
            . venv/bin/activate
            ./cc-test-reporter before-build
            PGHOST=localhost PGUSER=ubuntu PGPASSWORD=ubuntu pytest
            ./cc-test-reporter after-build --exit-code $?

      - store_artifacts:
          path: coverage.xml
          destination: coverage.xml

workflows:
    nightly:
        triggers:
        - schedule:
            cron: "0 19 * * *"
            filters:
                branches:
                only:
                    - master
     jobs:
       - build
